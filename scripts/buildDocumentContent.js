const fs = require('fs');
const path = require('path');

// Base directories
const docsDir = path.join(__dirname, '..', 'src', 'docs', 'guide');
const outputFile = path.join(__dirname, '..', 'src', 'documentContent.ts');

// Read all markdown files recursively
function readMarkdownFiles(dir, basePath = '') {
  const files = {};
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relativePath = path.join(basePath, entry.name);
    
    if (entry.isDirectory()) {
      Object.assign(files, readMarkdownFiles(fullPath, relativePath));
    } else if (entry.name.endsWith('.md')) {
      const key = relativePath.replace(/\\/g, '/').replace(/\.md$/, '');
      const content = fs.readFileSync(fullPath, 'utf-8');
      files[key] = content;
    }
  }
  
  return files;
}

// Generate TypeScript content
function generateTypeScriptFile(files) {
  let output = `// This file is auto-generated by scripts/buildDocumentContent.js
// DO NOT EDIT MANUALLY

export const documentContent: Record<string, string> = {
`;
  
  const entries = Object.entries(files);
  entries.forEach(([key, content], index) => {
    // Escape backticks and backslashes in content
    const escapedContent = content
      .replace(/\\/g, '\\\\')
      .replace(/`/g, '\\`')
      .replace(/\$/g, '\\$');
    
    output += `  '${key}': \`${escapedContent}\`,\n`;
  });
  
  output += `};\n`;
  return output;
}

// Main execution
console.log('Building document content...');
const files = readMarkdownFiles(docsDir);
console.log(`Found ${Object.keys(files).length} markdown files`);

const tsContent = generateTypeScriptFile(files);
fs.writeFileSync(outputFile, tsContent);
console.log(`Document content written to ${outputFile}`);
